{"repository_name":"github.com/mlobl/string-metrics","body":"# string-metrics\n\n[![Build Status](https://travis-ci.org/mlobl/string-metrics.svg?branch=master)](https://travis-ci.org/mlobl/string-metrics)\n\n\nString metric algorithms for Crystal:\n* [Levenshtein distance](https://en.wikipedia.org/wiki/Levenshtein_distance)\n* [Hamming distance](https://en.wikipedia.org/wiki/Hamming_distance)\n* [Damerauâ€“Levenshtein distance](https://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance)\n* [Jaro(-Winkler) Distance](https://en.wikipedia.org/wiki/Jaro%E2%80%93Winkler_distance)\n\n\n## Installation\n\nAdd this to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  string-metrics:\n    github: mlobl/string-metrics\n```\n\n## Usage\n\n```crystal\nrequire \"string-metrics\"\n\nStringMetrics.damerau_levenshtein(\"char\", \"hcar\") == 1\nStringMetrics.hamming(\"Micro\", \"Macro\") == 1\nStringMetrics.jaro(\"MARTHA\", \"MARHTA\").round(2) == 0.94\nStringMetrics.jaro_winkler(\"MARTHA\", \"MARHTA\").round(2) == 0.96\nStringMetrics.levenshtein(\"Car\", \"Char\") == 1\n```\n\n\n## Contributing\n\n1. Fork it ( https://github.com/mlobl/string-metrics/fork )\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Commit your changes (git commit -am 'Add some feature')\n4. Push to the branch (git push origin my-new-feature)\n5. Create a new Pull Request\n\n## Contributors\n\n- [mlobl](https://github.com/mlobl) Meyer Lobl - creator, maintainer\n","program":{"html_id":"github.com/mlobl/string-metrics/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/mlobl/string-metrics","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/mlobl/string-metrics/StringMetrics","path":"StringMetrics.html","kind":"module","full_name":"StringMetrics","name":"StringMetrics","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"string-metrics/version.cr","line_number":1,"url":"https://github.com/mlobl/string-metrics/blob/c7cf5d71b4b6d37fc657381a7242553208354ade/src/string-metrics/version.cr"},{"filename":"string-metrics.cr","line_number":4,"url":"https://github.com/mlobl/string-metrics/blob/c7cf5d71b4b6d37fc657381a7242553208354ade/src/string-metrics.cr"}],"repository_name":"github.com/mlobl/string-metrics","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"VERSION","value":"\"0.1.0\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"A module containing a collection of well known string metric algorithms","summary":"<p>A module containing a collection of well known string metric algorithms</p>","class_methods":[{"id":"damerau_levenshtein(s1:String,s2:String):Int-class-method","html_id":"damerau_levenshtein(s1:String,s2:String):Int-class-method","name":"damerau_levenshtein","doc":"A variation of the Levenshtein distance, this counts transpositions as a single edit.\n```crystal\nStringMetrics.damerau_levenshtein(\"char\", \"hcar\") == 1\n```\nas opposed to a distance of 2 from levenshtein on it's own\n\nPorted from [here](https://github.com/jamesturk/jellyfish/blob/master/jellyfish/_jellyfish.py)","summary":"<p>A variation of the Levenshtein distance, this counts transpositions as a single edit.</p>","abstract":false,"args":[{"name":"s1","doc":null,"default_value":"","external_name":"s1","restriction":"String"},{"name":"s2","doc":null,"default_value":"","external_name":"s2","restriction":"String"}],"args_string":"(s1 : String, s2 : String) : Int","source_link":"https://github.com/mlobl/string-metrics/blob/c7cf5d71b4b6d37fc657381a7242553208354ade/src/string-metrics.cr#L59","source_link":"https://github.com/mlobl/string-metrics/blob/c7cf5d71b4b6d37fc657381a7242553208354ade/src/string-metrics.cr#L59","def":{"name":"damerau_levenshtein","args":[{"name":"s1","doc":null,"default_value":"","external_name":"s1","restriction":"String"},{"name":"s2","doc":null,"default_value":"","external_name":"s2","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int","visibility":"Public","body":"infinite = s1.size + s2.size\nda = Hash(Char, Int32).new(default_value = 0)\nscore = (0...(s1.size + 2)).to_a.map do |i|\n  [0] * (s2.size + 2)\nend\nscore[0][0] = infinite\n(0...(s1.size + 1)).each do |i|\n  score[i + 1][0] = infinite\n  score[i + 1][1] = i\nend\n(0...(s2.size + 1)).each do |i|\n  score[0][i + 1] = infinite\n  score[1][i + 1] = i\nend\ns1_chars = s1.chars\ns2_chars = s2.chars\n(1..s1.size).each do |i|\n  db = 0\n  (1..s2.size).each do |j|\n    i1 = da[s2_chars[j - 1]]\n    j1 = db\n    cost = 1\n    if s1_chars[i - 1] == s2_chars[j - 1]\n      cost = 0\n      db = j\n    end\n    score[i + 1][j + 1] = ({score[i][j] + cost, score[i + 1][j] + 1, score[i][j + 1] + 1, ((score[i1][j1] + ((i - i1) - 1)) + 1) + ((j - j1) - 1)}).min\n  end\n  da[s1_chars[i - 1]] = i\nend\nscore[s1.size + 1][s2.size + 1]\n"}},{"id":"hamming(s1:String,s2:String):Int-class-method","html_id":"hamming(s1:String,s2:String):Int-class-method","name":"hamming","doc":"Returns the number of substitutions that exist between two strings of equal length.\nWill raise an ArgumentError if both parameters aren't of the same length\n```crystal\nStringMetrics.hamming(\"Micro\", \"Macro\") == 1\n```","summary":"<p>Returns the number of substitutions that exist between two strings of equal length.</p>","abstract":false,"args":[{"name":"s1","doc":null,"default_value":"","external_name":"s1","restriction":"String"},{"name":"s2","doc":null,"default_value":"","external_name":"s2","restriction":"String"}],"args_string":"(s1 : String, s2 : String) : Int","source_link":"https://github.com/mlobl/string-metrics/blob/c7cf5d71b4b6d37fc657381a7242553208354ade/src/string-metrics.cr#L47","source_link":"https://github.com/mlobl/string-metrics/blob/c7cf5d71b4b6d37fc657381a7242553208354ade/src/string-metrics.cr#L47","def":{"name":"hamming","args":[{"name":"s1","doc":null,"default_value":"","external_name":"s1","restriction":"String"},{"name":"s2","doc":null,"default_value":"","external_name":"s2","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int","visibility":"Public","body":"if s1.size != s2.size\n  raise(ArgumentError.new(\"input lengths are not equal\"))\nend\n(0...s2.size).sum do |i|\n  (  s1[i] != s2[i]) ? 1 : 0\nend\n"}},{"id":"jaro(s1:String,s2:String)-class-method","html_id":"jaro(s1:String,s2:String)-class-method","name":"jaro","doc":"A measure of similarity between two strings based on matching characters.\nReturns 0 if there is no similarity while 1 is an exact match\n```crystal\nStringMetrics.jaro(\"MARTHA\", \"MARHTA\").round(2) == 0.94\n```","summary":"<p>A measure of similarity between two strings based on matching characters.</p>","abstract":false,"args":[{"name":"s1","doc":null,"default_value":"","external_name":"s1","restriction":"String"},{"name":"s2","doc":null,"default_value":"","external_name":"s2","restriction":"String"}],"args_string":"(s1 : String, s2 : String)","source_link":"https://github.com/mlobl/string-metrics/blob/c7cf5d71b4b6d37fc657381a7242553208354ade/src/string-metrics.cr#L169","source_link":"https://github.com/mlobl/string-metrics/blob/c7cf5d71b4b6d37fc657381a7242553208354ade/src/string-metrics.cr#L169","def":{"name":"jaro","args":[{"name":"s1","doc":null,"default_value":"","external_name":"s1","restriction":"String"},{"name":"s2","doc":null,"default_value":"","external_name":"s2","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"reused_jaro_winkler(s1, s2, false)"}},{"id":"jaro_winkler(s1:String,s2:String,scaling_factor=0.1)-class-method","html_id":"jaro_winkler(s1:String,s2:String,scaling_factor=0.1)-class-method","name":"jaro_winkler","doc":"Similar to regular Jaro, but gives a higher score for matching from the beginning\nof the string. Only change the scaling factor if you're intimate with the algorithm.\n```crystal\nStringMetrics.jaro_winkler(\"MARTHA\", \"MARHTA\").round(2) == 0.96\n```","summary":"<p>Similar to regular Jaro, but gives a higher score for matching from the beginning of the string.</p>","abstract":false,"args":[{"name":"s1","doc":null,"default_value":"","external_name":"s1","restriction":"String"},{"name":"s2","doc":null,"default_value":"","external_name":"s2","restriction":"String"},{"name":"scaling_factor","doc":null,"default_value":"0.1","external_name":"scaling_factor","restriction":""}],"args_string":"(s1 : String, s2 : String, scaling_factor = <span class=\"n\">0.1</span>)","source_link":"https://github.com/mlobl/string-metrics/blob/c7cf5d71b4b6d37fc657381a7242553208354ade/src/string-metrics.cr#L178","source_link":"https://github.com/mlobl/string-metrics/blob/c7cf5d71b4b6d37fc657381a7242553208354ade/src/string-metrics.cr#L178","def":{"name":"jaro_winkler","args":[{"name":"s1","doc":null,"default_value":"","external_name":"s1","restriction":"String"},{"name":"s2","doc":null,"default_value":"","external_name":"s2","restriction":"String"},{"name":"scaling_factor","doc":null,"default_value":"0.1","external_name":"scaling_factor","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"reused_jaro_winkler(s1, s2, scaling_factor: scaling_factor)"}},{"id":"levenshtein(s1:String,s2:String):Int-class-method","html_id":"levenshtein(s1:String,s2:String):Int-class-method","name":"levenshtein","doc":"Returns the min edit distance between two strings. If the strings are exactly the same it will return 0,\nbut if they differ it will return the minimum number of insertions, deletions, or substitutions to make them exactly the same.\n```crystal\nStringMetrics.levenshtein(\"Car\", \"Char\") == 1\n```\nMore detail can be found [here](https://en.wikipedia.org/wiki/Levenshtein_distance).\n\nPorted from [here](https://en.wikibooks.org/wiki/Algorithm_Implementation/Strings/Levenshtein_distance#Python)","summary":"<p>Returns the min edit distance between two strings.</p>","abstract":false,"args":[{"name":"s1","doc":null,"default_value":"","external_name":"s1","restriction":"String"},{"name":"s2","doc":null,"default_value":"","external_name":"s2","restriction":"String"}],"args_string":"(s1 : String, s2 : String) : Int","source_link":"https://github.com/mlobl/string-metrics/blob/c7cf5d71b4b6d37fc657381a7242553208354ade/src/string-metrics.cr#L13","source_link":"https://github.com/mlobl/string-metrics/blob/c7cf5d71b4b6d37fc657381a7242553208354ade/src/string-metrics.cr#L13","def":{"name":"levenshtein","args":[{"name":"s1","doc":null,"default_value":"","external_name":"s1","restriction":"String"},{"name":"s2","doc":null,"default_value":"","external_name":"s2","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int","visibility":"Public","body":"if s1.size < s2.size\n  return levenshtein(s2, s1)\nend\nif s2.size == 0\n  return s1.size\nend\nprevious_row = (0..s2.size).to_a\ns1_chars = s1.chars\ns2_chars = s2.chars\ncache = [[0] * (s2.size + 1), [0] * (s2.size + 1)]\ns1_chars.each_with_index do |c1, i|\n  current_row = cache[i % 2]\n  current_row[0] = i + 1\n  s2_chars.each_with_index do |c2, j|\n    insertions = (previous_row.unsafe_at(j + 1)) + 1\n    deletions = (current_row.unsafe_at(j)) + 1\n    substitutions = previous_row.unsafe_at(j)\n    if c1 != c2\n      substitutions = substitutions + 1\n    end\n    min = insertions\n    if deletions < min\n      min = deletions\n    end\n    if substitutions < min\n      min = substitutions\n    end\n    current_row[j + 1] = min\n  end\n  previous_row = current_row\nend\nprevious_row.last\n"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]}}